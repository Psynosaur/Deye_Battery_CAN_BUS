// <auto-generated />
using System;
using CAN2JSON.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CAN2JSON.Migrations
{
    [DbContext(typeof(Can2JsonContext))]
    [Migration("20230714065345_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.9");

            modelBuilder.Entity("CAN2JSON.Data.Models.BatteryReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("BatteryCurrent")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BatteryVoltage")
                        .HasColumnType("TEXT");

                    b.Property<int?>("BmsReadingId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CellVoltageDelta")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CellVoltageHigh")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CellVoltageLow")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ChargedTotal")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentLimit")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentLimitMax")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Cycles")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DischargedTotal")
                        .HasColumnType("TEXT");

                    b.Property<int>("SlaveNumber")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("StateOfCharge")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StateOfHealth")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TemperatureMos")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TemperatureOne")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TemperatureTwo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BmsReadingId");

                    b.ToTable("BatteryReadings");
                });

            modelBuilder.Entity("CAN2JSON.Data.Models.BmsReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amps")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BatteryCapacity")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BatteryCutoffVoltage")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BmsTemperatureHigh")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BmsTemperatureLow")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CellVoltageDelta")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CellVoltageHigh")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CellVoltageLow")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ChargeCurrentLimit")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ChargeCurrentLimitMax")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ChargeVoltage")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentLimit")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DischargeLimit")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FullChargedRestingVoltage")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StateOfCharge")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StateOfHealth")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Voltage")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Watts")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BmsReadings");
                });

            modelBuilder.Entity("CAN2JSON.Data.Models.BatteryReading", b =>
                {
                    b.HasOne("CAN2JSON.Data.Models.BmsReading", null)
                        .WithMany("BatteryReadings")
                        .HasForeignKey("BmsReadingId");
                });

            modelBuilder.Entity("CAN2JSON.Data.Models.BmsReading", b =>
                {
                    b.Navigation("BatteryReadings");
                });
#pragma warning restore 612, 618
        }
    }
}
